#!/usr/bin/env python3
"""
Switch CLI - Command-line tool for the Switch framework

Usage:
    swtch <command> [options] [arguments]

Commands:
    run         Run a Switch application
    build       Build a Switch application for production
    create      Create a new Switch application
    deploy      Deploy a Switch application
    component   Generate a new component
    page        Generate a new page
    store       Generate a store module
    pkg         Manage packages
    kit         Manage kits
    help        Show help information

Run 'swtch help <command>' for more information on a specific command.
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path

def show_help(command=None):
    """Show help information."""
    if command is None:
        print(__doc__)
        return
    
    # Show help for a specific command
    if command == "run":
        print("""
Switch Run - Run a Switch application

Usage:
    swtch run [options] <app>
    swtch run dev <app>
    swtch run prod <app>

Arguments:
    app               Application name or file to run

Options:
    --port PORT       Port to run the server on (default: 8000)
    --host HOST       Host to run the server on (default: localhost)
    --ssr             Enable server-side rendering
    --hmr             Enable hot module replacement
    --reload          Enable live reloading
    --workers N       Number of worker processes (default: 1)
    --debug           Enable debug mode
    --no-kits         Disable kit integration
    --env FILE        Environment file to use (default: .env)

Shortcuts:
    dev               Shortcut for --hmr --reload --debug
    prod              Shortcut for --prod
""")
    elif command == "build":
        print("""
Switch Build - Build a Switch application for production

Usage:
    swtch build [options] <app>

Arguments:
    app               Application name or file to build

Options:
    --output DIR      Output directory (default: dist)
    --minify          Minify the output
    --sourcemaps      Generate source maps
    --no-kits         Disable kit integration
    --verbose         Show verbose output
""")
    elif command == "create":
        print("""
Switch Create - Create a new Switch application

Usage:
    swtch create [options] <name>

Arguments:
    name              Application name

Options:
    --template NAME   Template to use (default: app)
                      Available templates: app, dashboard
    --directory DIR   Directory to create the application in (default: current directory)
    --dev             Create a development-ready application with additional tools
    --verbose         Show verbose output
""")
    else:
        print(f"Unknown command: {command}")
        print("Run 'swtch help' for a list of commands.")

def run_app(args):
    """Run a Switch application."""
    # Check if the first argument is "dev" or "prod"
    mode = None
    if args and args[0] in ["dev", "prod"]:
        mode = args.pop(0)
    
    # Parse arguments
    parser = argparse.ArgumentParser(description="Run a Switch application")
    parser.add_argument("app", help="Application name or file to run")
    parser.add_argument("--port", type=int, default=8000, help="Port to run the server on (default: 8000)")
    parser.add_argument("--host", default="localhost", help="Host to run the server on (default: localhost)")
    parser.add_argument("--ssr", action="store_true", help="Enable server-side rendering")
    parser.add_argument("--hmr", action="store_true", help="Enable hot module replacement")
    parser.add_argument("--reload", action="store_true", help="Enable live reloading")
    parser.add_argument("--workers", type=int, default=1, help="Number of worker processes (default: 1)")
    parser.add_argument("--debug", action="store_true", help="Enable debug mode")
    parser.add_argument("--no-kits", action="store_true", help="Disable kit integration")
    parser.add_argument("--prod", action="store_true", help="Enable production mode")
    parser.add_argument("--env", default=".env", help="Environment file to use (default: .env)")
    
    parsed_args = parser.parse_args(args)
    
    # Apply mode options
    if mode == "dev":
        parsed_args.hmr = True
        parsed_args.reload = True
        parsed_args.debug = True
    elif mode == "prod":
        parsed_args.prod = True
    
    # Determine the file to run
    app = parsed_args.app
    if app == "app":
        # Look for main.mono in the current directory
        if os.path.exists("main.mono"):
            file_path = "main.mono"
        else:
            print("Error: main.mono not found in the current directory")
            return 1
    elif os.path.exists(app):
        # Use the provided file
        file_path = app
    else:
        print(f"Error: File not found: {app}")
        return 1
    
    # Run the application using python run.py
    if os.path.exists("run.py"):
        cmd = [
            "python3",
            "run.py"
        ]
        
        # Run the command
        try:
            return subprocess.call(cmd)
        except KeyboardInterrupt:
            print("\nApplication stopped")
            return 0
    else:
        print("Error: run.py not found in the current directory")
        return 1

def main():
    """Main entry point."""
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description="Switch CLI", add_help=False)
    parser.add_argument("command", nargs="?", help="Command to run")
    parser.add_argument("args", nargs=argparse.REMAINDER, help="Command arguments")
    
    args = parser.parse_args()
    
    # Show help if no command is provided
    if not args.command or args.command == "help":
        if args.args:
            show_help(args.args[0])
        else:
            show_help()
        return 0
    
    # Handle different commands
    try:
        if args.command == "run":
            return run_app(args.args)
        else:
            print(f"Unknown command: {args.command}")
            print("Run 'swtch help' for a list of commands.")
            return 1
    except Exception as e:
        print(f"Error: {str(e)}")
        return 1

if __name__ == "__main__":
    sys.exit(main())
