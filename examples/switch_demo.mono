//  __  __                   
// |  \/  | ___  _ __   ___  
// | |\/| |/ _ \| '_ \ / _ \ 
// | |  | | (_) | | | | (_) |
// |_|  |_|\___/|_| |_|\___/ 
//                           
// Switch Framework Demo

component SwitchDemo {
    state {
        title: string = "Switch Framework Demo",
        count: number = 0,
        todos: array = [
            { id: 1, text: "Learn Mono", completed: true },
            { id: 2, text: "Learn Switch", completed: false },
            { id: 3, text: "Build an app", completed: false }
        ],
        newTodo: string = "",
        activeTab: number = 0,
        showModal: boolean = false
    }
    
    function start() {
        print "=== Switch Framework Demo ===";
        
        // Configure routes
        http.get("/", "handleRoot");
        http.get("/about", "handleAbout");
        http.get("/app.js", "handleAppJs");
        http.get("/app.css", "handleAppCss");
        
        // Start the server
        http.start();
    }
    
    function handleRoot(req, res) {
        print "Handling request to /";
        
        // Render the app
        var html = switch.render("Switch Framework Demo", ["/app.js"], ["/app.css"]);
        
        // Send the response
        res.html(html);
    }
    
    function handleAbout(req, res) {
        print "Handling request to /about";
        
        // Render the app
        var html = switch.render("Switch Framework Demo - About", ["/app.js"], ["/app.css"]);
        
        // Send the response
        res.html(html);
    }
    
    function handleAppJs(req, res) {
        print "Handling request to /app.js";
        
        // Send the custom JavaScript
        res.header("Content-Type", "application/javascript");
        res.text(`
            // Custom JavaScript for Switch Framework Demo
            console.log('Switch Framework Demo JavaScript loaded');
            
            // Initialize the store
            const store = SwitchStore.createStore({
                state: {
                    count: 0,
                    todos: []
                },
                mutations: {
                    increment(state) {
                        state.count++;
                    },
                    decrement(state) {
                        state.count--;
                    },
                    addTodo(state, todo) {
                        state.todos.push(todo);
                    },
                    toggleTodo(state, id) {
                        const todo = state.todos.find(todo => todo.id === id);
                        if (todo) {
                            todo.completed = !todo.completed;
                        }
                    },
                    removeTodo(state, id) {
                        state.todos = state.todos.filter(todo => todo.id !== id);
                    }
                },
                actions: {
                    incrementAsync(context) {
                        setTimeout(() => {
                            context.commit('increment');
                        }, 1000);
                    }
                },
                plugins: [
                    SwitchStore.createLogger()
                ]
            });
            
            // Make the store globally available
            window.store = store;
        `);
    }
    
    function handleAppCss(req, res) {
        print "Handling request to /app.css";
        
        // Send the custom CSS
        res.header("Content-Type", "text/css");
        res.text(`
            /* Custom CSS for Switch Framework Demo */
            body {
                font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f8f9fa;
                color: #333;
                line-height: 1.5;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 1rem;
            }
            
            .header {
                background-color: #343a40;
                color: white;
                padding: 1rem 0;
                margin-bottom: 2rem;
            }
            
            .header-content {
                max-width: 1200px;
                margin: 0 auto;
                padding: 0 1rem;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .title {
                margin: 0;
                font-size: 1.5rem;
            }
            
            .section {
                margin-bottom: 2rem;
                padding: 1.5rem;
                background-color: white;
                border-radius: 0.25rem;
                box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            }
            
            .section-title {
                margin-top: 0;
                margin-bottom: 1rem;
                border-bottom: 1px solid #dee2e6;
                padding-bottom: 0.5rem;
            }
            
            .todo-list {
                list-style: none;
                padding: 0;
                margin: 0;
            }
            
            .todo-item {
                display: flex;
                align-items: center;
                padding: 0.5rem 0;
                border-bottom: 1px solid #f1f1f1;
            }
            
            .todo-item:last-child {
                border-bottom: none;
            }
            
            .todo-checkbox {
                margin-right: 0.5rem;
            }
            
            .todo-text {
                flex: 1;
            }
            
            .todo-completed {
                text-decoration: line-through;
                color: #6c757d;
            }
            
            .todo-form {
                display: flex;
                margin-bottom: 1rem;
            }
            
            .todo-input {
                flex: 1;
                padding: 0.5rem;
                border: 1px solid #ced4da;
                border-radius: 0.25rem 0 0 0.25rem;
            }
            
            .todo-button {
                padding: 0.5rem 1rem;
                background-color: #007bff;
                color: white;
                border: 1px solid #007bff;
                border-radius: 0 0.25rem 0.25rem 0;
                cursor: pointer;
            }
            
            .todo-button:hover {
                background-color: #0069d9;
                border-color: #0062cc;
            }
            
            .counter {
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 1rem 0;
            }
            
            .counter-value {
                font-size: 2rem;
                margin: 0 1rem;
            }
            
            .counter-button {
                padding: 0.5rem 1rem;
                background-color: #007bff;
                color: white;
                border: 1px solid #007bff;
                border-radius: 0.25rem;
                cursor: pointer;
            }
            
            .counter-button.decrement {
                background-color: #dc3545;
                border-color: #dc3545;
            }
            
            .counter-button:hover {
                opacity: 0.9;
            }
        `);
    }
    
    function render() {
        // Use the Switch framework to render the component
        switch.clientEvent("click", "handleClick");
        switch.clientEvent("submit", "handleSubmit");
        switch.clientEvent("input", "handleInput");
        
        // Create a Switch component
        var demo = switch.component("SwitchDemo", {
            title: this.state.title,
            count: this.state.count,
            todos: this.state.todos,
            newTodo: this.state.newTodo,
            activeTab: this.state.activeTab,
            showModal: this.state.showModal
        });
        
        // Return the HTML
        return `
            <div class="app">
                <header class="header">
                    <div class="header-content">
                        <h1 class="title">${this.state.title}</h1>
                    </div>
                </header>
                <main class="container">
                    <div class="section">
                        <h2 class="section-title">Counter Example</h2>
                        <div class="counter">
                            <button class="counter-button decrement" data-event="click" data-action="decrement">-</button>
                            <div class="counter-value">${this.state.count}</div>
                            <button class="counter-button" data-event="click" data-action="increment">+</button>
                        </div>
                        <div style="text-align: center;">
                            <button class="switch-button switch-button-primary" data-event="click" data-action="show-modal">
                                Show Modal
                            </button>
                        </div>
                    </div>
                    
                    <div class="section">
                        <h2 class="section-title">Todo List</h2>
                        <form class="todo-form" data-event="submit" data-action="add-todo">
                            <input type="text" class="todo-input" placeholder="Add a new todo" 
                                   value="${this.state.newTodo}" data-event="input" data-action="update-new-todo">
                            <button type="submit" class="todo-button">Add</button>
                        </form>
                        <ul class="todo-list">
                            ${this.renderTodos()}
                        </ul>
                    </div>
                </main>
                
                ${this.renderModal()}
            </div>
        `;
    }
    
    function renderTodos() {
        var html = "";
        
        for (var i = 0; i < this.state.todos.length; i++) {
            var todo = this.state.todos[i];
            html += `
                <li class="todo-item">
                    <input type="checkbox" class="todo-checkbox" 
                           ${todo.completed ? "checked" : ""} 
                           data-event="click" data-action="toggle-todo" data-id="${todo.id}">
                    <span class="todo-text ${todo.completed ? "todo-completed" : ""}">${todo.text}</span>
                    <button class="switch-button switch-button-danger switch-button-sm" 
                            data-event="click" data-action="remove-todo" data-id="${todo.id}">
                        Delete
                    </button>
                </li>
            `;
        }
        
        return html;
    }
    
    function renderModal() {
        if (!this.state.showModal) {
            return "";
        }
        
        return `
            <div class="switch-modal switch-modal-visible">
                <div class="switch-modal-dialog">
                    <div class="switch-modal-content">
                        <div class="switch-modal-header">
                            <h5 class="switch-modal-title">Counter Value</h5>
                            <button type="button" class="switch-modal-close" 
                                    data-event="click" data-action="hide-modal">
                                &times;
                            </button>
                        </div>
                        <div class="switch-modal-body">
                            <p>The current counter value is: <strong>${this.state.count}</strong></p>
                        </div>
                        <div class="switch-modal-footer">
                            <button type="button" class="switch-button switch-button-secondary" 
                                    data-event="click" data-action="hide-modal">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="switch-modal-backdrop switch-modal-backdrop-visible"></div>
        `;
    }
    
    function handleClick(event) {
        if (event.target.dataset.action === "increment") {
            this.state.count += 1;
        } else if (event.target.dataset.action === "decrement") {
            this.state.count -= 1;
        } else if (event.target.dataset.action === "toggle-todo") {
            var id = parseInt(event.target.dataset.id);
            this.toggleTodo(id);
        } else if (event.target.dataset.action === "remove-todo") {
            var id = parseInt(event.target.dataset.id);
            this.removeTodo(id);
        } else if (event.target.dataset.action === "show-modal") {
            this.state.showModal = true;
        } else if (event.target.dataset.action === "hide-modal") {
            this.state.showModal = false;
        }
    }
    
    function handleSubmit(event) {
        if (event.target.dataset.action === "add-todo") {
            event.preventDefault();
            this.addTodo();
        }
    }
    
    function handleInput(event) {
        if (event.target.dataset.action === "update-new-todo") {
            this.state.newTodo = event.target.value;
        }
    }
    
    function addTodo() {
        if (this.state.newTodo.trim() === "") {
            return;
        }
        
        var newTodo = {
            id: Date.now(),
            text: this.state.newTodo,
            completed: false
        };
        
        this.state.todos.push(newTodo);
        this.state.newTodo = "";
    }
    
    function toggleTodo(id) {
        for (var i = 0; i < this.state.todos.length; i++) {
            if (this.state.todos[i].id === id) {
                this.state.todos[i].completed = !this.state.todos[i].completed;
                break;
            }
        }
    }
    
    function removeTodo(id) {
        var newTodos = [];
        
        for (var i = 0; i < this.state.todos.length; i++) {
            if (this.state.todos[i].id !== id) {
                newTodos.push(this.state.todos[i]);
            }
        }
        
        this.state.todos = newTodos;
    }
}
