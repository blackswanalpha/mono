//  __  __                   
// |  \/  | ___  _ __   ___  
// | |\/| |/ _ \| '_ \ / _ \ 
// | |  | | (_) | | | | (_) |
// |_|  |_|\___/|_| |_|\___/ 
//                           
// Mono Language - Package Manager Demo

component PackageDemo {
    state {
        packages: any[] = []
    }
    
    function loadPackages() {
        // In a real implementation, this would load packages from the registry
        print "Loading packages from registry...";
        
        // UI Components package
        var uiComponents = {
            name: "UIComponents",
            version: "1.0.0",
            description: "A collection of UI components for Mono applications",
            components: ["Button", "Card", "Modal", "Tabs", "Form"],
            dependencies: ["CoreUtils", "EventSystem"]
        };
        this.packages.push(uiComponents);
        
        // Auth Module package
        var authModule = {
            name: "AuthModule",
            version: "1.0.0",
            description: "Authentication and authorization module for Mono applications",
            components: ["Auth", "Login", "Register", "PasswordReset", "UserProfile"],
            dependencies: ["CoreUtils", "CryptoLib", "UIComponents", "DataStorage"]
        };
        this.packages.push(authModule);
        
        // Data Storage package
        var dataStorage = {
            name: "DataStorage",
            version: "2.0.0",
            description: "Data storage and retrieval module for Mono applications",
            components: ["Storage", "Query", "Index", "Cache", "Sync"],
            dependencies: ["CoreUtils"]
        };
        this.packages.push(dataStorage);
        
        print "Loaded " + this.packages.length + " packages";
    }
    
    function listPackages() {
        print "\nAvailable Packages:";
        print "-------------------";
        
        for var i = 0; i < this.packages.length; i++ {
            var pkg = this.packages[i];
            print pkg.name + "@" + pkg.version + ": " + pkg.description;
            print "  Components: " + pkg.components.join(", ");
            print "  Dependencies: " + pkg.dependencies.join(", ");
            print "";
        }
    }
    
    function installPackage(name: string) {
        print "\nInstalling package: " + name;
        
        // Find the package
        var found = false;
        var pkg = null;
        
        for var i = 0; i < this.packages.length; i++ {
            if (this.packages[i].name == name) {
                found = true;
                pkg = this.packages[i];
                break;
            }
        }
        
        if (!found) {
            print "Error: Package not found: " + name;
            return;
        }
        
        // Install dependencies first
        print "Resolving dependencies...";
        for var i = 0; i < pkg.dependencies.length; i++ {
            var depName = pkg.dependencies[i];
            print "  Installing dependency: " + depName;
        }
        
        // Install the package
        print "Installing " + pkg.name + "@" + pkg.version;
        print "  Components: " + pkg.components.join(", ");
        
        print "Package " + pkg.name + " installed successfully";
    }
    
    function auditPackage(name: string) {
        print "\nAuditing package: " + name;
        
        // Find the package
        var found = false;
        var pkg = null;
        
        for var i = 0; i < this.packages.length; i++ {
            if (this.packages[i].name == name) {
                found = true;
                pkg = this.packages[i];
                break;
            }
        }
        
        if (!found) {
            print "Error: Package not found: " + name;
            return;
        }
        
        // Audit the package
        print "Scanning " + pkg.name + "@" + pkg.version + " for vulnerabilities...";
        
        // Mock vulnerability check
        if (name == "CryptoLib") {
            print "  CRITICAL: Insecure random number generation in CryptoLib@3.2.1";
            print "  FIX: Upgrade to CryptoLib@3.2.2 or later";
        } else {
            print "  No vulnerabilities found";
        }
        
        // Check license compliance
        print "Checking license compliance...";
        print "  All dependencies use compatible licenses";
    }
    
    function buildDependencyGraph() {
        print "\nBuilding dependency graph:";
        print "-------------------------";
        
        for var i = 0; i < this.packages.length; i++ {
            var pkg = this.packages[i];
            if (pkg.dependencies.length > 0) {
                print pkg.name + " depends on: " + pkg.dependencies.join(", ");
            } else {
                print pkg.name + " has no dependencies";
            }
        }
    }
    
    function run() {
        print "=== Mono Package Manager Demo ===\n";
        
        // Load packages
        this.loadPackages();
        
        // List packages
        this.listPackages();
        
        // Install a package
        this.installPackage("AuthModule");
        
        // Audit a package
        this.auditPackage("CryptoLib");
        
        // Build dependency graph
        this.buildDependencyGraph();
        
        print "\n=== End of Package Manager Demo ===";
    }
}

component Main {
    function start() {
        var demo = new PackageDemo();
        demo.run();
    }
}
