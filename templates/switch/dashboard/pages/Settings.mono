//  __  __                   
// |  \/  | ___  _ __   ___  
// | |\/| |/ _ \| '_ \ / _ \ 
// | |  | | (_) | | | | (_) |
// |_|  |_|\___/|_| |_|\___/ 
//                           
// Settings Page

component SettingsPage {
    state {
        activeTab: string = "profile",
        user: object = {
            name: "Admin User",
            email: "admin@example.com",
            avatar: "/static/img/avatar.png",
            role: "Administrator",
            bio: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed euismod, nisl vel ultricies lacinia, nisl nisl aliquam nisl, eget aliquam nisl nisl sit amet nisl."
        },
        settings: object = {
            notifications: {
                email: true,
                push: false,
                sms: false
            },
            privacy: {
                showEmail: false,
                showActivity: true
            },
            appearance: {
                darkMode: false,
                sidebarCollapsed: false,
                fontSize: "medium"
            }
        },
        loading: boolean = false,
        saveSuccess: boolean = false,
        saveError: string = ""
    }
    
    function constructor() {
        // Initialize the component
        this.loadUserSettings();
    }
    
    function loadUserSettings() {
        // Load user settings from localStorage
        if (switch.isClient()) {
            var darkMode = localStorage.getItem("darkMode") === "true";
            var sidebarCollapsed = localStorage.getItem("sidebarCollapsed") === "true";
            
            this.state.settings.appearance.darkMode = darkMode;
            this.state.settings.appearance.sidebarCollapsed = sidebarCollapsed;
        }
    }
    
    function saveUserSettings() {
        // Save user settings to localStorage
        if (switch.isClient()) {
            localStorage.setItem("darkMode", this.state.settings.appearance.darkMode);
            localStorage.setItem("sidebarCollapsed", this.state.settings.appearance.sidebarCollapsed);
        }
    }
    
    function setActiveTab(tab) {
        this.state.activeTab = tab;
    }
    
    function updateUserProfile(event) {
        event.preventDefault();
        
        // Simulate saving user profile
        this.state.loading = true;
        
        setTimeout(() => {
            this.state.loading = false;
            this.state.saveSuccess = true;
            
            // Reset success message after 3 seconds
            setTimeout(() => {
                this.state.saveSuccess = false;
            }, 3000);
        }, 1000);
    }
    
    function updateSettings(event) {
        event.preventDefault();
        
        // Simulate saving settings
        this.state.loading = true;
        
        setTimeout(() => {
            this.state.loading = false;
            this.state.saveSuccess = true;
            
            // Save user settings
            this.saveUserSettings();
            
            // Reset success message after 3 seconds
            setTimeout(() => {
                this.state.saveSuccess = false;
            }, 3000);
        }, 1000);
    }
    
    function toggleNotification(type) {
        this.state.settings.notifications[type] = !this.state.settings.notifications[type];
    }
    
    function togglePrivacy(type) {
        this.state.settings.privacy[type] = !this.state.settings.privacy[type];
    }
    
    function toggleAppearance(type) {
        this.state.settings.appearance[type] = !this.state.settings.appearance[type];
    }
    
    function setFontSize(size) {
        this.state.settings.appearance.fontSize = size;
    }
    
    function render() {
        // Register client-side event handlers
        switch.clientEvent("click", "handleClick");
        switch.clientEvent("submit", "handleSubmit");
        switch.clientEvent("change", "handleChange");
        
        // Create the component
        var settingsPage = switch.component("SettingsPage", {
            activeTab: this.state.activeTab,
            user: this.state.user,
            settings: this.state.settings,
            loading: this.state.loading,
            saveSuccess: this.state.saveSuccess,
            saveError: this.state.saveError
        });
        
        // Return the HTML
        return `
            <div class="settings-page">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-3 mb-4 mb-md-0">
                            <div class="card">
                                <div class="card-body">
                                    <div class="nav flex-column nav-pills" role="tablist">
                                        <button class="nav-link ${this.state.activeTab === 'profile' ? 'active' : ''}" data-tab="profile" data-event="click">
                                            <i class="bi bi-person me-2"></i> Profile
                                        </button>
                                        <button class="nav-link ${this.state.activeTab === 'notifications' ? 'active' : ''}" data-tab="notifications" data-event="click">
                                            <i class="bi bi-bell me-2"></i> Notifications
                                        </button>
                                        <button class="nav-link ${this.state.activeTab === 'privacy' ? 'active' : ''}" data-tab="privacy" data-event="click">
                                            <i class="bi bi-shield-lock me-2"></i> Privacy
                                        </button>
                                        <button class="nav-link ${this.state.activeTab === 'appearance' ? 'active' : ''}" data-tab="appearance" data-event="click">
                                            <i class="bi bi-palette me-2"></i> Appearance
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-9">
                            <div class="card">
                                <div class="card-body">
                                    ${this.state.saveSuccess ? 
                                        '<div class="alert alert-success">Settings saved successfully!</div>' : 
                                        ''}
                                    
                                    ${this.state.saveError ? 
                                        `<div class="alert alert-danger">${this.state.saveError}</div>` : 
                                        ''}
                                    
                                    <div class="tab-content">
                                        ${this.state.activeTab === 'profile' ? this.renderProfileTab() : ''}
                                        ${this.state.activeTab === 'notifications' ? this.renderNotificationsTab() : ''}
                                        ${this.state.activeTab === 'privacy' ? this.renderPrivacyTab() : ''}
                                        ${this.state.activeTab === 'appearance' ? this.renderAppearanceTab() : ''}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;
    }
    
    function renderProfileTab() {
        return `
            <div class="tab-pane fade show active">
                <h4 class="mb-4">Profile Settings</h4>
                
                <form data-event="submit" data-action="updateProfile">
                    <div class="mb-3">
                        <label for="name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="name" value="${this.state.user.name}">
                    </div>
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" value="${this.state.user.email}">
                    </div>
                    
                    <div class="mb-3">
                        <label for="bio" class="form-label">Bio</label>
                        <textarea class="form-control" id="bio" rows="3">${this.state.user.bio}</textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label for="avatar" class="form-label">Avatar</label>
                        <div class="d-flex align-items-center">
                            <img src="${this.state.user.avatar}" alt="${this.state.user.name}" class="avatar me-3" style="width: 64px; height: 64px; border-radius: 50%;">
                            <input type="file" class="form-control" id="avatar">
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" ${this.state.loading ? 'disabled' : ''}>
                        ${this.state.loading ? '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Loading...' : 'Save Changes'}
                    </button>
                </form>
            </div>
        `;
    }
    
    function renderNotificationsTab() {
        return `
            <div class="tab-pane fade show active">
                <h4 class="mb-4">Notification Settings</h4>
                
                <form data-event="submit" data-action="updateSettings">
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="emailNotifications" ${this.state.settings.notifications.email ? 'checked' : ''} data-event="change" data-action="toggleNotification" data-type="email">
                        <label class="form-check-label" for="emailNotifications">Email Notifications</label>
                    </div>
                    
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="pushNotifications" ${this.state.settings.notifications.push ? 'checked' : ''} data-event="change" data-action="toggleNotification" data-type="push">
                        <label class="form-check-label" for="pushNotifications">Push Notifications</label>
                    </div>
                    
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="smsNotifications" ${this.state.settings.notifications.sms ? 'checked' : ''} data-event="change" data-action="toggleNotification" data-type="sms">
                        <label class="form-check-label" for="smsNotifications">SMS Notifications</label>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" ${this.state.loading ? 'disabled' : ''}>
                        ${this.state.loading ? '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Loading...' : 'Save Changes'}
                    </button>
                </form>
            </div>
        `;
    }
    
    function renderPrivacyTab() {
        return `
            <div class="tab-pane fade show active">
                <h4 class="mb-4">Privacy Settings</h4>
                
                <form data-event="submit" data-action="updateSettings">
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="showEmail" ${this.state.settings.privacy.showEmail ? 'checked' : ''} data-event="change" data-action="togglePrivacy" data-type="showEmail">
                        <label class="form-check-label" for="showEmail">Show Email to Other Users</label>
                    </div>
                    
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="showActivity" ${this.state.settings.privacy.showActivity ? 'checked' : ''} data-event="change" data-action="togglePrivacy" data-type="showActivity">
                        <label class="form-check-label" for="showActivity">Show Activity Status</label>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" ${this.state.loading ? 'disabled' : ''}>
                        ${this.state.loading ? '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Loading...' : 'Save Changes'}
                    </button>
                </form>
            </div>
        `;
    }
    
    function renderAppearanceTab() {
        return `
            <div class="tab-pane fade show active">
                <h4 class="mb-4">Appearance Settings</h4>
                
                <form data-event="submit" data-action="updateSettings">
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="darkMode" ${this.state.settings.appearance.darkMode ? 'checked' : ''} data-event="change" data-action="toggleAppearance" data-type="darkMode">
                        <label class="form-check-label" for="darkMode">Dark Mode</label>
                    </div>
                    
                    <div class="mb-3 form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="sidebarCollapsed" ${this.state.settings.appearance.sidebarCollapsed ? 'checked' : ''} data-event="change" data-action="toggleAppearance" data-type="sidebarCollapsed">
                        <label class="form-check-label" for="sidebarCollapsed">Collapsed Sidebar</label>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Font Size</label>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn ${this.state.settings.appearance.fontSize === 'small' ? 'btn-primary' : 'btn-outline-primary'}" data-event="click" data-action="setFontSize" data-size="small">Small</button>
                            <button type="button" class="btn ${this.state.settings.appearance.fontSize === 'medium' ? 'btn-primary' : 'btn-outline-primary'}" data-event="click" data-action="setFontSize" data-size="medium">Medium</button>
                            <button type="button" class="btn ${this.state.settings.appearance.fontSize === 'large' ? 'btn-primary' : 'btn-outline-primary'}" data-event="click" data-action="setFontSize" data-size="large">Large</button>
                        </div>
                    </div>
                    
                    <button type="submit" class="btn btn-primary" ${this.state.loading ? 'disabled' : ''}>
                        ${this.state.loading ? '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Loading...' : 'Save Changes'}
                    </button>
                </form>
            </div>
        `;
    }
    
    function handleClick(event) {
        // Check if this is a tab button
        if (event.target.dataset.tab || event.target.closest("[data-tab]")) {
            event.preventDefault();
            var tab = event.target.dataset.tab || event.target.closest("[data-tab]").dataset.tab;
            this.setActiveTab(tab);
        }
        
        // Check if this is a font size button
        if (event.target.dataset.action === "setFontSize" || event.target.closest("[data-action='setFontSize']")) {
            event.preventDefault();
            var size = event.target.dataset.size || event.target.closest("[data-action='setFontSize']").dataset.size;
            this.setFontSize(size);
        }
    }
    
    function handleSubmit(event) {
        // Check if this is a form submission
        if (event.target.dataset.action === "updateProfile") {
            this.updateUserProfile(event);
        } else if (event.target.dataset.action === "updateSettings") {
            this.updateSettings(event);
        }
    }
    
    function handleChange(event) {
        // Check if this is a notification toggle
        if (event.target.dataset.action === "toggleNotification") {
            var type = event.target.dataset.type;
            this.toggleNotification(type);
        }
        
        // Check if this is a privacy toggle
        if (event.target.dataset.action === "togglePrivacy") {
            var type = event.target.dataset.type;
            this.togglePrivacy(type);
        }
        
        // Check if this is an appearance toggle
        if (event.target.dataset.action === "toggleAppearance") {
            var type = event.target.dataset.type;
            this.toggleAppearance(type);
        }
    }
}

// Export the component
export SettingsPage;
